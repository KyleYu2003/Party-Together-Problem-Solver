import networkx as nx
from mtsp_dp import mtsp_dp
import random
from student_utils import *


def create_complete_graph(G, H):
    complete_graph = nx.Graph()
    nodes = [0] + H
    complete_graph.add_nodes_from(nodes)

    for i in range(len(nodes)):
        for j in range(i + 1, len(nodes)):
            u, v = nodes[i], nodes[j]
            if nx.has_path(G, u, v):
                weight = nx.dijkstra_path_length(G, u, v)
                complete_graph.add_edge(u, v, weight=weight)

    return complete_graph


def pthp_solver_from_tsp(G, H):
    """
    PTHP solver via reduction to Euclidean TSP.
    Input:
        G: a NetworkX graph representing the city.
        This directed graph is equivalent to an undirected one by construction.
        H: a list of home nodes that you must visit.
    Output:
        tour: a list of nodes traversed by your car.

    All nodes are represented as integers.

    You must solve the question by first transforming a PTHP
    problem to a TSP problem. After solving TSP via the dynamic
    programming algorithm introduced in lectures, construct a solution
    for the original PTHP problem.

    The tour must begin and end at node 0.
    It can only go through edges that exist in the graph.
    It must visit every node in H.
    """
    # draw_gragh(G)

    reduced_graph = create_complete_graph(G, H)
    tsp_tour = mtsp_dp(reduced_graph)
    tour = []
    for i in range(len(tsp_tour) - 1):
        u, v = tsp_tour[i], tsp_tour[i + 1]
        path = nx.dijkstra_path(G, u, v)
        tour.extend(path[:-1])

    u, v = tsp_tour[-1], 0
    path = nx.dijkstra_path(G, u, v)
    tour.extend(path)

    return tour


if __name__ == "__main__":
    file = 'inputs/8.in'
    print(f"\nReading file {os.path.basename(file)}...")
    G, H, alpha = input_file_to_instance(file)
    print('Graph constructed...')
    print(f"n = {G.number_of_nodes()}, |H| = {len(H)}, alpha = {alpha}")
    tour = pthp_solver_from_tsp(G, H)
    print('Tour generated by PTHP solver...')
    print('Analyzing the solution...')
    is_legitimate, driving_cost, walking_cost = analyze_solution(G, H, alpha, tour, {})
    print(f"Your solution is {'NOT' if not is_legitimate else ''} legimitate.")
    print(f"Total driving cost of your soluton: {driving_cost:.6f}")
    print(f"Total walking cost of your soluton: {walking_cost:.6f}")
    print(f"Tour: {tour}")
